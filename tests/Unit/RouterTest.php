<?php

namespace Tests\Unit;

use App\Exceptions\RouteNotFoundException;
use App\Router;
use PHPUnit\Framework\TestCase;
use Tests\Dataproviders\RouterDataProvider;

class RouterTest extends TestCase
{
    private Router $router;

//setUp method is called before each test is ran
    protected function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub
        $this->router = new Router();
    }

    //GIVEN WHEN THEN
    //Test that the route can be registered
    public function test_that_it_registers_a_route(): void
    {

        //given that we have a router object
        //$router = new Router();
        //when we call a register method
        $this->router->register('get', '/users', ['Users', 'index']);
        //then we assert route was registered
        $expected = [
            'get' => [
                '/users' => [
                    'Users', 'index'
                ]
            ]
        ];
        $this->assertEquals($expected, $this->router->routes());

    }

    public function test_that_it_registers_a_route_with_callable_parameter(): void
    {
        //$router = new Router();
        $this->router->register('get', '/users', function () {
            echo 'Hello World';
        });
        $this->assertInstanceOf('Closure', $this->router->routes()['get']['/users']);
    }

    /*public function test_that_it_registers_a_route_with_callable_function(): void
    {
        // $router = new Router();
        $this->router->register('get', '/users', function () {
            return 'Hello World';
        });
        $closure = $this->router->routes()['get']['/users'];
        $this->assertSame('Hello World', $closure());
    }*/

    public function test_it_resolves_route_from_a_closure()
    {
        $this->router->get('/users', fn () => [1,2,3]);
        $this->assertEquals([1,2,3],$this->router->resolve('/users','get'));
    }

    public function test_it_reslves_route(){
        $users = new class() {
            public function index(): array
            {
                return [1,2,3];
            }
        };

        $this->router->get('/users', [$users::class, 'index']);
        $this->assertEquals([1,2,3], $this->router->resolve('/users','get'));

    }


    public function test_it_registers_get_route(): void
    {
        //given that we have a router object
        // $router = new Router();

        //when we call a get method
        $this->router->get('/users', ['Users', 'index']);
        //then we assert get array with route and method is created
        $expected = ['get' => ['/users' => ['Users', 'index']]];

        $this->assertEquals($expected, $this->router->routes());
    }

    public function test_it_registers_post_route(): void
    {
        //given that we have a router object
        //$router = new Router();

        //when we call a get method
        $this->router->post('/users', ['Users', 'store']);
        //then we assert get array with route and method is created
        $expected = ['post' => ['/users' => ['Users', 'store']]];

        $this->assertEquals($expected, $this->router->routes());
    }

    public function test_that_there_are_no_routes_when_router_is_created(): void
    {
        $router = new Router();
        $this->assertEmpty($this->router->routes());

    }

    //tests for resolve method
    //#[DataProvider('routeNotFoundCases')]

    /**
     * @dataProvider \Tests\Dataproviders\RouterDataProvider::routeNotFoundCasesClass
     */
    public function test_it_throws_route_not_found_exception (
        string $requestUri,
        string $requestMethod
    ): void
    {
        //anonymous class to simulate a controller
        $users = new class() {
            public function delete(): bool
            {
                return true;
            }
        };
        $router = new Router();
        //given
        $router->post('/users', [$users::class, 'delete']);
        $router->get('/users', [$users::class, 'store']);
        $router->post('/notes', [$users::class, 'delete']);
        $router->get('/users', ['Forms', 'index']);
       // $router->get('/users', ['Users', 'index']);
        // $this->router->post('/users', [$users::class, 'pp']);


        $this->expectException(RouteNotFoundException::class);
        //we are going to provide $requestUri and $requestMethod with data provider
        $router->resolve($requestUri, $requestMethod);
    }
    //for "method_exists" we need to simulate class, we can do that with
    //anonymous class (we can simulate controller)


    //DataProvider for test_it_throws_route_not_found_exception
    public static function routeNotFoundCases(): array
    {
        return [
            ['/users', 'put'], //route is found but request method is not found
            ['/invoices', 'post'],
            ['/users', 'get'], // fails because Users is not a class
            ['/notes', 'get'],
            // ['/notes','post'],
            ['/forms', 'get'], //still fails because Forms is not a class
        ];
    }



}